name: Dev → Staging CI/CD

on:
  push:
    branches: [dev]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 3. Install dependencies
      - name: Install dependencies
        run: pip install -r requirements.txt

      # 4. Run Unit Tests
      - name: Run Unit Tests
        run: pytest tests/Unit --maxfail=1 --disable-warnings -q

      # 5. Configure Git identity
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # 6. Create PR if it doesn’t exist
      - name: Create or Update PR
        id: create_pr
        run: |
          PR=$(curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls?head=${GITHUB_REPOSITORY_OWNER}:dev&base=staging" \
            | jq '.[0].number')

          if [ "$PR" = "null" ]; then
            echo "Creating new PR..."
            RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls \
              -d '{"title":"Automated PR: dev → staging","head":"dev","base":"staging","body":"This PR is automatically created after passing unit tests."}')
            PR=$(echo "$RESPONSE" | jq '.number')
          fi

          echo "PR_NUMBER=$PR" >> $GITHUB_ENV

      # 7. Attempt to merge PR automatically
      - name: Auto Merge PR
        if: env.PR_NUMBER != ''
        run: |
          RESPONSE=$(curl -s -X PUT \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/$PR_NUMBER/merge \
            -d '{"merge_method":"merge"}')
          MERGED=$(echo "$RESPONSE" | jq '.merged')
          if [ "$MERGED" = "true" ]; then
            echo "✅ PR merged successfully"
          else
            echo "❌ PR could not be merged automatically (possible conflicts)"
            echo "$RESPONSE"
            exit 1






